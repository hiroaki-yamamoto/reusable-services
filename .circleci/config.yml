version: 2.1
commands:
  go-test:
    parameters:
      PKGNAME:
        type: string
      COVNAME:
        type: string
    steps:
      - run:
          name: "Fetch Global Dependencies"
          command: |
            apk --no-cache --update upgrade &&
            apk --no-cache add git gcc libc-dev ca-certificates
      - restore_cache:
            keys:
              - ci-{{ .Branch }}-{{ checksum "go.sum" }}
      - run:
          name: "Run go mod download"
          command: "go mod download"
      - save_cache:
          key: ci-{{ .Branch }}-{{ checksum "go.sum" }}
          paths:
            - "/go"
      - run: ./cc-test-reporter before-build
      - run:
          name: "Test with measuring coverage"
          command: go test -coverprofile=c.out ./<<parameters.PKGNAME>>/...
      - run:
          name: "Collect Coverage"
          command: |
            ./cc-test-reporter format-coverage \
              -t gocov \
              --prefix github.com/hiroaki-yamamoto/${CIRCLE_PROJECT_REPONAME} \
              -o ./coverages/<<parameters.COVNAME>>.json
      - persist_to_workspace:
          root: .
          paths:
            - coverages/<<parameters.COVNAME>>.json
  python-test:
    parameters:
      PKGNAME:
        type: string
      COVNAME:
        type: string
    steps:
      - run:
          name: "Install poetry"
          command: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      - restore_cache:
            keys:
              - ci-{{ .Branch }}-{{ checksum "poetry.lock" }}
      - run: ~/.poetry/bin/poetry install
      - save_cache:
          key: ci-{{ .Branch }}-{{ checksum "poetry.lock" }}
          paths:
            - "~/.cache/pypoetry"
      - run: ../../cc-test-reporter before-build
      - run: PATH=$PATH:~/.poetry/bin poetry run coverage erase
      - run: PATH=$PATH:~/.poetry/bin poetry run tox
      - run: PATH=$PATH:~/.poetry/bin poetry run coverage xml -o ../../coverage.xml
      - run:
          name: "Collect Coverage"
          command: |
            ./cc-test-reporter format-coverage \
              -t coverage.py -o coverages/<<parameters.COVNAME>>.json
          working_directory: ../../
      - persist_to_workspace:
          root: ../../
          paths:
            - coverages/<<parameters.COVNAME>>.json
  node-test:
    parameters:
      PKGNAME:
        type: string
      COVNAME:
        type: string
    steps:
      - restore_cache:
            keys:
              - ci-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run: yarn install
      - save_cache:
          key: ci-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - "./node_modules"
      - run: ../../cc-test-reporter before-build
      - run: yarn run test
      - run:
          name: "Collect Coverage"
          command: |
            ./cc-test-reporter format-coverage ./<<parameters.PKGNAME>>/coverage/lcov.info \
              -t lcov -o coverages/<<parameters.COVNAME>>.json
          working_directory: ../../
      - persist_to_workspace:
          root: ../../
          paths:
            - coverages/<<parameters.COVNAME>>.json
jobs:
  build:
    docker:
      - image: alpine
    working_directory: ~/repo
    steps:
      - run:
          name: "Fetch Global Dependencies"
          command: |
            apk --no-cache --update upgrade &&
            apk --no-cache add git gcc libc-dev ca-certificates curl
      - checkout
      - run:
          name: "Download Code Climate App"
          command: |
            curl -o ./cc-test-reporter -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 &&
            chmod +x ./cc-test-reporter
      - persist_to_workspace:
          root: ./
          paths:
            - '.'
  mongo-adapter:
    docker:
      - image: golang:alpine
        environment:
          GO111MODULE: 'on'
      - image: mongo
        name: mongo
        environment:
          MONGO_INITDB_ROOT_USERNAME: adapter
          MONGO_INITDB_ROOT_PASSWORD: adapter
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ./
      - go-test:
          PKGNAME: adapter/db/mongodb
          COVNAME: mongo-adapter
  test-go:
    parameters:
      PKGNAME:
        type: string
      COVNAME:
        type: string
    docker:
      - image: golang:alpine
        environment:
          GO111MODULE: 'on'
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ./
      - go-test:
          PKGNAME: <<parameters.PKGNAME>>
          COVNAME: <<parameters.COVNAME>>
  test-py:
    parameters:
      PKGNAME:
        type: string
      COVNAME:
        type: string
    docker:
      - image: python
    working_directory: ~/repo/<<parameters.PKGNAME>>
    steps:
      - attach_workspace:
          at: ../../
      - python-test:
          PKGNAME: <<parameters.PKGNAME>>
          COVNAME: <<parameters.COVNAME>>
  test-node:
    parameters:
      PKGNAME:
        type: string
      COVNAME:
        type: string
    docker:
      - image: node
    working_directory: ~/repo/<<parameters.PKGNAME>>
    steps:
      - attach_workspace:
          at: ../../
      - node-test:
          PKGNAME: <<parameters.PKGNAME>>
          COVNAME: <<parameters.COVNAME>>
  collect_coverage:
    docker:
      - image: alpine
    working_directory: ~/repo
    environment:
      NUM_COV: '6'
    steps:
      - run:
          name: "Fetch Global Dependencies"
          command: |
            apk --no-cache --update upgrade &&
            apk --no-cache add git gcc libc-dev ca-certificates curl
      - run:
          name: "Make Coverage Storage"
          command: mkdir -p /tmp/coverages
      - attach_workspace:
          at: '.'
      - run:
          name: "Combine Coverages"
          command: |
            ./cc-test-reporter sum-coverage ./coverages/*.json\
              -o ./coverage-overall.json -p ${NUM_COV}
      - run:
          name: "Upload the coverage"
          command:
            ./cc-test-reporter upload-coverage -i ./coverage-overall.json

workflows:
  version: 2
  master:
    jobs:
      - build
      - mongo-adapter:
          requires:
            - build
      - test-go:
          name: token
          PKGNAME: token
          COVNAME: token
          requires:
            -  build
      - test-go:
          name: random
          PKGNAME: random
          COVNAME: random
          requires:
            -  build
      - test-go:
          name: render-go
          PKGNAME: render/go
          COVNAME: render-go
          requires:
            -  build
      - test-py:
          name: render-py
          PKGNAME: render/py
          COVNAME: render-py
          requires:
            - build
      - test-node:
          name: render-node
          PKGNAME: render/node
          COVNAME: render-node
          requires:
            - build
      - collect_coverage:
          requires:
            - mongo-adapter
            - token
            - random
            - render-go
            - render-py
            - render-node
