version: 2.1
commands:
  go-test:
    parameters:
      PKGNAME:
        type: string
      COVNAME:
        type: string
    steps:
      - run:
          name: "Fetch Global Dependencies"
          command: |
            apk --no-cache --update upgrade &&
            apk --no-cache add git gcc libc-dev ca-certificates curl
      - restore_cache:
            keys:
              - ci-{{ .Branch }}-{{ checksum "go.sum" }}
      - run:
          name: "Run go mod download"
          command: "go mod download"
      - run:
          name: "Download Code Climate App"
          command: |
            curl -o ../cc-test-reporter -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 &&
            chmod +x ../cc-test-reporter
      - save_cache:
          key: ci-{{ .Branch }}-{{ checksum "go.sum" }}
          paths:
            - "/go"
      - run:
          name: "Creating coverage storage"
          command: mkdir -p /tmp/coverages
      - run:
          name: "Test & Upload the coverage"
          command: |
            ../cc-test-reporter before-build &&
            go test -coverprofile=c.out ./<<parameters.PKGNAME>>/...
            ../cc-test-reporter format-coverage \
              -t gocov \
              --prefix github.com/hiroaki-yamamoto/${CIRCLE_PROJECT_REPONAME} \
              -o /tmp/coverages/<<parameters.COVNAME>>.json
      - persist_to_workspace:
          root: /tmp
          paths:
            - coverages/<<parameters.COVNAME>>.json
jobs:
  build:
    docker:
      - image: alpine
    working_directory: ~/repo
    steps:
      - run:
          name: "Fetch Global Dependencies"
          command: |
            apk --no-cache --update upgrade &&
            apk --no-cache add git gcc libc-dev ca-certificates
      - checkout
      - persist_to_workspace:
          root: ./
          paths:
            - '.'
  mongo-adapter:
    docker:
      - image: golang:alpine
        environment:
          GO111MODULE: 'on'
      - image: mongo
        name: mongo
        environment:
          MONGO_INITDB_ROOT_USERNAME: adapter
          MONGO_INITDB_ROOT_PASSWORD: adapter
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ./
      - go-test:
          PKGNAME: adapter/db/mongodb
          COVNAME: mongo-adapter
  token:
      docker:
        - image: golang:alpine
          environment:
            GO111MODULE: 'on'
      working_directory: ~/repo
      steps:
        - attach_workspace:
            at: ./
        - go-test:
            PKGNAME: token
            COVNAME: token
  random:
      docker:
        - image: golang:alpine
          environment:
            GO111MODULE: 'on'
      working_directory: ~/repo
      steps:
        - attach_workspace:
            at: ./
        - go-test:
            PKGNAME: random
            COVNAME: random
  collect_coverage:
    docker:
      - image: alpine
    working_directory: ~/repo
    steps:
      - run:
          name: "Fetch Global Dependencies"
          command: |
            apk --no-cache --update upgrade &&
            apk --no-cache add git gcc libc-dev ca-certificates curl
      - run:
          name: "Download Code Climate App"
          command: |
            curl -o ../cc-test-reporter -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 &&
            chmod +x ../cc-test-reporter
      - run:
          name: "Make Coverage Storage"
          command: mkdir -p /tmp/coverages
      - attach_workspace:
          at: /tmp
      - run:
          name: "Combine Coverages"
          command: |
            ../cc-test-reporter sum-coverage /tmp/coverages/*.json\
              -o ./coverage-overall.json -p 3
      - run:
          name: "Upload the coverage"
          command:
            ../cc-test-reporter upload-coverage -i ./coverage-overall.json

workflows:
  version: 2
  master:
    jobs:
      - build
      - mongo-adapter:
          requires:
            - build
      - token:
          requires:
            -  build
      - random:
          requires:
            -  build
      - collect_coverage:
          requires:
            - mongo-adapter
            - token
            - random
