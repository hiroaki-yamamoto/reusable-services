// Code generated by MockGen. DO NOT EDIT.
// Source: ../rpc/service.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	rpc "github.com/hiroaki-yamamoto/reusable-services/token/rpc"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockTokenClient is a mock of TokenClient interface
type MockTokenClient struct {
	ctrl     *gomock.Controller
	recorder *MockTokenClientMockRecorder
}

// MockTokenClientMockRecorder is the mock recorder for MockTokenClient
type MockTokenClientMockRecorder struct {
	mock *MockTokenClient
}

// NewMockTokenClient creates a new mock instance
func NewMockTokenClient(ctrl *gomock.Controller) *MockTokenClient {
	mock := &MockTokenClient{ctrl: ctrl}
	mock.recorder = &MockTokenClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTokenClient) EXPECT() *MockTokenClientMockRecorder {
	return m.recorder
}

// Push mocks base method
func (m *MockTokenClient) Push(ctx context.Context, in *rpc.Token, opts ...grpc.CallOption) (*rpc.Token, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Push", varargs...)
	ret0, _ := ret[0].(*rpc.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push
func (mr *MockTokenClientMockRecorder) Push(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockTokenClient)(nil).Push), varargs...)
}

// Pop mocks base method
func (m *MockTokenClient) Pop(ctx context.Context, in *rpc.Token, opts ...grpc.CallOption) (*rpc.Token, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Pop", varargs...)
	ret0, _ := ret[0].(*rpc.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pop indicates an expected call of Pop
func (mr *MockTokenClientMockRecorder) Pop(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockTokenClient)(nil).Pop), varargs...)
}

// MockTokenServer is a mock of TokenServer interface
type MockTokenServer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServerMockRecorder
}

// MockTokenServerMockRecorder is the mock recorder for MockTokenServer
type MockTokenServerMockRecorder struct {
	mock *MockTokenServer
}

// NewMockTokenServer creates a new mock instance
func NewMockTokenServer(ctrl *gomock.Controller) *MockTokenServer {
	mock := &MockTokenServer{ctrl: ctrl}
	mock.recorder = &MockTokenServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTokenServer) EXPECT() *MockTokenServerMockRecorder {
	return m.recorder
}

// Push mocks base method
func (m *MockTokenServer) Push(arg0 context.Context, arg1 *rpc.Token) (*rpc.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0, arg1)
	ret0, _ := ret[0].(*rpc.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push
func (mr *MockTokenServerMockRecorder) Push(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockTokenServer)(nil).Push), arg0, arg1)
}

// Pop mocks base method
func (m *MockTokenServer) Pop(arg0 context.Context, arg1 *rpc.Token) (*rpc.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pop", arg0, arg1)
	ret0, _ := ret[0].(*rpc.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pop indicates an expected call of Pop
func (mr *MockTokenServerMockRecorder) Pop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockTokenServer)(nil).Pop), arg0, arg1)
}
