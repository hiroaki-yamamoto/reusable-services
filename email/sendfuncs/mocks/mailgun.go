// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mailgun/mailgun-go/v4 (interfaces: Mailgun)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	mailgun "github.com/mailgun/mailgun-go/v4"
	io "io"
	http "net/http"
	reflect "reflect"
)

// MockMailgun is a mock of Mailgun interface
type MockMailgun struct {
	ctrl     *gomock.Controller
	recorder *MockMailgunMockRecorder
}

// MockMailgunMockRecorder is the mock recorder for MockMailgun
type MockMailgunMockRecorder struct {
	mock *MockMailgun
}

// NewMockMailgun creates a new mock instance
func NewMockMailgun(ctrl *gomock.Controller) *MockMailgun {
	mock := &MockMailgun{ctrl: ctrl}
	mock.recorder = &MockMailgunMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMailgun) EXPECT() *MockMailgunMockRecorder {
	return m.recorder
}

// APIBase mocks base method
func (m *MockMailgun) APIBase() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIBase")
	ret0, _ := ret[0].(string)
	return ret0
}

// APIBase indicates an expected call of APIBase
func (mr *MockMailgunMockRecorder) APIBase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIBase", reflect.TypeOf((*MockMailgun)(nil).APIBase))
}

// APIKey mocks base method
func (m *MockMailgun) APIKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// APIKey indicates an expected call of APIKey
func (mr *MockMailgunMockRecorder) APIKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIKey", reflect.TypeOf((*MockMailgun)(nil).APIKey))
}

// AddBounce mocks base method
func (m *MockMailgun) AddBounce(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBounce", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBounce indicates an expected call of AddBounce
func (mr *MockMailgunMockRecorder) AddBounce(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBounce", reflect.TypeOf((*MockMailgun)(nil).AddBounce), arg0, arg1, arg2, arg3)
}

// AddDomainIP mocks base method
func (m *MockMailgun) AddDomainIP(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDomainIP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDomainIP indicates an expected call of AddDomainIP
func (mr *MockMailgunMockRecorder) AddDomainIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDomainIP", reflect.TypeOf((*MockMailgun)(nil).AddDomainIP), arg0, arg1)
}

// AddTemplateVersion mocks base method
func (m *MockMailgun) AddTemplateVersion(arg0 context.Context, arg1 string, arg2 *mailgun.TemplateVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTemplateVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTemplateVersion indicates an expected call of AddTemplateVersion
func (mr *MockMailgunMockRecorder) AddTemplateVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTemplateVersion", reflect.TypeOf((*MockMailgun)(nil).AddTemplateVersion), arg0, arg1, arg2)
}

// ChangeCredentialPassword mocks base method
func (m *MockMailgun) ChangeCredentialPassword(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCredentialPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeCredentialPassword indicates an expected call of ChangeCredentialPassword
func (mr *MockMailgunMockRecorder) ChangeCredentialPassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCredentialPassword", reflect.TypeOf((*MockMailgun)(nil).ChangeCredentialPassword), arg0, arg1, arg2)
}

// Client mocks base method
func (m *MockMailgun) Client() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockMailgunMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockMailgun)(nil).Client))
}

// CreateComplaint mocks base method
func (m *MockMailgun) CreateComplaint(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComplaint", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComplaint indicates an expected call of CreateComplaint
func (mr *MockMailgunMockRecorder) CreateComplaint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComplaint", reflect.TypeOf((*MockMailgun)(nil).CreateComplaint), arg0, arg1)
}

// CreateCredential mocks base method
func (m *MockMailgun) CreateCredential(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredential", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCredential indicates an expected call of CreateCredential
func (mr *MockMailgunMockRecorder) CreateCredential(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredential", reflect.TypeOf((*MockMailgun)(nil).CreateCredential), arg0, arg1, arg2)
}

// CreateDomain mocks base method
func (m *MockMailgun) CreateDomain(arg0 context.Context, arg1 string, arg2 *mailgun.CreateDomainOptions) (mailgun.DomainResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomain", arg0, arg1, arg2)
	ret0, _ := ret[0].(mailgun.DomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain
func (mr *MockMailgunMockRecorder) CreateDomain(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockMailgun)(nil).CreateDomain), arg0, arg1, arg2)
}

// CreateExport mocks base method
func (m *MockMailgun) CreateExport(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExport", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExport indicates an expected call of CreateExport
func (mr *MockMailgunMockRecorder) CreateExport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExport", reflect.TypeOf((*MockMailgun)(nil).CreateExport), arg0, arg1)
}

// CreateMailingList mocks base method
func (m *MockMailgun) CreateMailingList(arg0 context.Context, arg1 mailgun.MailingList) (mailgun.MailingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMailingList", arg0, arg1)
	ret0, _ := ret[0].(mailgun.MailingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMailingList indicates an expected call of CreateMailingList
func (mr *MockMailgunMockRecorder) CreateMailingList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMailingList", reflect.TypeOf((*MockMailgun)(nil).CreateMailingList), arg0, arg1)
}

// CreateMember mocks base method
func (m *MockMailgun) CreateMember(arg0 context.Context, arg1 bool, arg2 string, arg3 mailgun.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMember indicates an expected call of CreateMember
func (mr *MockMailgunMockRecorder) CreateMember(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockMailgun)(nil).CreateMember), arg0, arg1, arg2, arg3)
}

// CreateMemberList mocks base method
func (m *MockMailgun) CreateMemberList(arg0 context.Context, arg1 *bool, arg2 string, arg3 []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMemberList", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMemberList indicates an expected call of CreateMemberList
func (mr *MockMailgunMockRecorder) CreateMemberList(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMemberList", reflect.TypeOf((*MockMailgun)(nil).CreateMemberList), arg0, arg1, arg2, arg3)
}

// CreateRoute mocks base method
func (m *MockMailgun) CreateRoute(arg0 context.Context, arg1 mailgun.Route) (mailgun.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoute", arg0, arg1)
	ret0, _ := ret[0].(mailgun.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoute indicates an expected call of CreateRoute
func (mr *MockMailgunMockRecorder) CreateRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoute", reflect.TypeOf((*MockMailgun)(nil).CreateRoute), arg0, arg1)
}

// CreateTemplate mocks base method
func (m *MockMailgun) CreateTemplate(arg0 context.Context, arg1 *mailgun.Template) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTemplate indicates an expected call of CreateTemplate
func (mr *MockMailgunMockRecorder) CreateTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockMailgun)(nil).CreateTemplate), arg0, arg1)
}

// CreateUnsubscribe mocks base method
func (m *MockMailgun) CreateUnsubscribe(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnsubscribe", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUnsubscribe indicates an expected call of CreateUnsubscribe
func (mr *MockMailgunMockRecorder) CreateUnsubscribe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnsubscribe", reflect.TypeOf((*MockMailgun)(nil).CreateUnsubscribe), arg0, arg1, arg2)
}

// CreateWebhook mocks base method
func (m *MockMailgun) CreateWebhook(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhook", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWebhook indicates an expected call of CreateWebhook
func (mr *MockMailgunMockRecorder) CreateWebhook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*MockMailgun)(nil).CreateWebhook), arg0, arg1, arg2)
}

// DeleteBounce mocks base method
func (m *MockMailgun) DeleteBounce(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBounce", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBounce indicates an expected call of DeleteBounce
func (mr *MockMailgunMockRecorder) DeleteBounce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBounce", reflect.TypeOf((*MockMailgun)(nil).DeleteBounce), arg0, arg1)
}

// DeleteBounceList mocks base method
func (m *MockMailgun) DeleteBounceList(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBounceList", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBounceList indicates an expected call of DeleteBounceList
func (mr *MockMailgunMockRecorder) DeleteBounceList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBounceList", reflect.TypeOf((*MockMailgun)(nil).DeleteBounceList), arg0)
}

// DeleteComplaint mocks base method
func (m *MockMailgun) DeleteComplaint(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComplaint", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComplaint indicates an expected call of DeleteComplaint
func (mr *MockMailgunMockRecorder) DeleteComplaint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComplaint", reflect.TypeOf((*MockMailgun)(nil).DeleteComplaint), arg0, arg1)
}

// DeleteCredential mocks base method
func (m *MockMailgun) DeleteCredential(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredential", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCredential indicates an expected call of DeleteCredential
func (mr *MockMailgunMockRecorder) DeleteCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredential", reflect.TypeOf((*MockMailgun)(nil).DeleteCredential), arg0, arg1)
}

// DeleteDomain mocks base method
func (m *MockMailgun) DeleteDomain(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomain indicates an expected call of DeleteDomain
func (mr *MockMailgunMockRecorder) DeleteDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomain", reflect.TypeOf((*MockMailgun)(nil).DeleteDomain), arg0, arg1)
}

// DeleteDomainIP mocks base method
func (m *MockMailgun) DeleteDomainIP(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainIP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomainIP indicates an expected call of DeleteDomainIP
func (mr *MockMailgunMockRecorder) DeleteDomainIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainIP", reflect.TypeOf((*MockMailgun)(nil).DeleteDomainIP), arg0, arg1)
}

// DeleteMailingList mocks base method
func (m *MockMailgun) DeleteMailingList(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMailingList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMailingList indicates an expected call of DeleteMailingList
func (mr *MockMailgunMockRecorder) DeleteMailingList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMailingList", reflect.TypeOf((*MockMailgun)(nil).DeleteMailingList), arg0, arg1)
}

// DeleteMember mocks base method
func (m *MockMailgun) DeleteMember(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember
func (mr *MockMailgunMockRecorder) DeleteMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockMailgun)(nil).DeleteMember), arg0, arg1, arg2)
}

// DeleteRoute mocks base method
func (m *MockMailgun) DeleteRoute(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoute indicates an expected call of DeleteRoute
func (mr *MockMailgunMockRecorder) DeleteRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockMailgun)(nil).DeleteRoute), arg0, arg1)
}

// DeleteTag mocks base method
func (m *MockMailgun) DeleteTag(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag
func (mr *MockMailgunMockRecorder) DeleteTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockMailgun)(nil).DeleteTag), arg0, arg1)
}

// DeleteTemplate mocks base method
func (m *MockMailgun) DeleteTemplate(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTemplate indicates an expected call of DeleteTemplate
func (mr *MockMailgunMockRecorder) DeleteTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockMailgun)(nil).DeleteTemplate), arg0, arg1)
}

// DeleteTemplateVersion mocks base method
func (m *MockMailgun) DeleteTemplateVersion(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplateVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTemplateVersion indicates an expected call of DeleteTemplateVersion
func (mr *MockMailgunMockRecorder) DeleteTemplateVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplateVersion", reflect.TypeOf((*MockMailgun)(nil).DeleteTemplateVersion), arg0, arg1, arg2)
}

// DeleteUnsubscribe mocks base method
func (m *MockMailgun) DeleteUnsubscribe(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnsubscribe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnsubscribe indicates an expected call of DeleteUnsubscribe
func (mr *MockMailgunMockRecorder) DeleteUnsubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnsubscribe", reflect.TypeOf((*MockMailgun)(nil).DeleteUnsubscribe), arg0, arg1)
}

// DeleteUnsubscribeWithTag mocks base method
func (m *MockMailgun) DeleteUnsubscribeWithTag(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnsubscribeWithTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnsubscribeWithTag indicates an expected call of DeleteUnsubscribeWithTag
func (mr *MockMailgunMockRecorder) DeleteUnsubscribeWithTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnsubscribeWithTag", reflect.TypeOf((*MockMailgun)(nil).DeleteUnsubscribeWithTag), arg0, arg1, arg2)
}

// DeleteWebhook mocks base method
func (m *MockMailgun) DeleteWebhook(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebhook indicates an expected call of DeleteWebhook
func (mr *MockMailgunMockRecorder) DeleteWebhook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*MockMailgun)(nil).DeleteWebhook), arg0, arg1)
}

// Domain mocks base method
func (m *MockMailgun) Domain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain
func (mr *MockMailgunMockRecorder) Domain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockMailgun)(nil).Domain))
}

// GetBounce mocks base method
func (m *MockMailgun) GetBounce(arg0 context.Context, arg1 string) (mailgun.Bounce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBounce", arg0, arg1)
	ret0, _ := ret[0].(mailgun.Bounce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBounce indicates an expected call of GetBounce
func (mr *MockMailgunMockRecorder) GetBounce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBounce", reflect.TypeOf((*MockMailgun)(nil).GetBounce), arg0, arg1)
}

// GetComplaint mocks base method
func (m *MockMailgun) GetComplaint(arg0 context.Context, arg1 string) (mailgun.Complaint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplaint", arg0, arg1)
	ret0, _ := ret[0].(mailgun.Complaint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplaint indicates an expected call of GetComplaint
func (mr *MockMailgunMockRecorder) GetComplaint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplaint", reflect.TypeOf((*MockMailgun)(nil).GetComplaint), arg0, arg1)
}

// GetDomain mocks base method
func (m *MockMailgun) GetDomain(arg0 context.Context, arg1 string) (mailgun.DomainResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain", arg0, arg1)
	ret0, _ := ret[0].(mailgun.DomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain
func (mr *MockMailgunMockRecorder) GetDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockMailgun)(nil).GetDomain), arg0, arg1)
}

// GetDomainConnection mocks base method
func (m *MockMailgun) GetDomainConnection(arg0 context.Context, arg1 string) (mailgun.DomainConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainConnection", arg0, arg1)
	ret0, _ := ret[0].(mailgun.DomainConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainConnection indicates an expected call of GetDomainConnection
func (mr *MockMailgunMockRecorder) GetDomainConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainConnection", reflect.TypeOf((*MockMailgun)(nil).GetDomainConnection), arg0, arg1)
}

// GetDomainTracking mocks base method
func (m *MockMailgun) GetDomainTracking(arg0 context.Context, arg1 string) (mailgun.DomainTracking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainTracking", arg0, arg1)
	ret0, _ := ret[0].(mailgun.DomainTracking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainTracking indicates an expected call of GetDomainTracking
func (mr *MockMailgunMockRecorder) GetDomainTracking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainTracking", reflect.TypeOf((*MockMailgun)(nil).GetDomainTracking), arg0, arg1)
}

// GetExport mocks base method
func (m *MockMailgun) GetExport(arg0 context.Context, arg1 string) (mailgun.Export, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExport", arg0, arg1)
	ret0, _ := ret[0].(mailgun.Export)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExport indicates an expected call of GetExport
func (mr *MockMailgunMockRecorder) GetExport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExport", reflect.TypeOf((*MockMailgun)(nil).GetExport), arg0, arg1)
}

// GetExportLink mocks base method
func (m *MockMailgun) GetExportLink(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExportLink", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExportLink indicates an expected call of GetExportLink
func (mr *MockMailgunMockRecorder) GetExportLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExportLink", reflect.TypeOf((*MockMailgun)(nil).GetExportLink), arg0, arg1)
}

// GetIP mocks base method
func (m *MockMailgun) GetIP(arg0 context.Context, arg1 string) (mailgun.IPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIP", arg0, arg1)
	ret0, _ := ret[0].(mailgun.IPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIP indicates an expected call of GetIP
func (mr *MockMailgunMockRecorder) GetIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIP", reflect.TypeOf((*MockMailgun)(nil).GetIP), arg0, arg1)
}

// GetMailingList mocks base method
func (m *MockMailgun) GetMailingList(arg0 context.Context, arg1 string) (mailgun.MailingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMailingList", arg0, arg1)
	ret0, _ := ret[0].(mailgun.MailingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMailingList indicates an expected call of GetMailingList
func (mr *MockMailgunMockRecorder) GetMailingList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMailingList", reflect.TypeOf((*MockMailgun)(nil).GetMailingList), arg0, arg1)
}

// GetMember mocks base method
func (m *MockMailgun) GetMember(arg0 context.Context, arg1, arg2 string) (mailgun.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(mailgun.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember
func (mr *MockMailgunMockRecorder) GetMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockMailgun)(nil).GetMember), arg0, arg1, arg2)
}

// GetRoute mocks base method
func (m *MockMailgun) GetRoute(arg0 context.Context, arg1 string) (mailgun.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoute", arg0, arg1)
	ret0, _ := ret[0].(mailgun.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoute indicates an expected call of GetRoute
func (mr *MockMailgunMockRecorder) GetRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoute", reflect.TypeOf((*MockMailgun)(nil).GetRoute), arg0, arg1)
}

// GetStats mocks base method
func (m *MockMailgun) GetStats(arg0 context.Context, arg1 []string, arg2 *mailgun.GetStatOptions) ([]mailgun.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0, arg1, arg2)
	ret0, _ := ret[0].([]mailgun.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats
func (mr *MockMailgunMockRecorder) GetStats(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockMailgun)(nil).GetStats), arg0, arg1, arg2)
}

// GetStoredAttachment mocks base method
func (m *MockMailgun) GetStoredAttachment(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoredAttachment", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoredAttachment indicates an expected call of GetStoredAttachment
func (mr *MockMailgunMockRecorder) GetStoredAttachment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoredAttachment", reflect.TypeOf((*MockMailgun)(nil).GetStoredAttachment), arg0, arg1)
}

// GetStoredMessage mocks base method
func (m *MockMailgun) GetStoredMessage(arg0 context.Context, arg1 string) (mailgun.StoredMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoredMessage", arg0, arg1)
	ret0, _ := ret[0].(mailgun.StoredMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoredMessage indicates an expected call of GetStoredMessage
func (mr *MockMailgunMockRecorder) GetStoredMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoredMessage", reflect.TypeOf((*MockMailgun)(nil).GetStoredMessage), arg0, arg1)
}

// GetStoredMessageForURL mocks base method
func (m *MockMailgun) GetStoredMessageForURL(arg0 context.Context, arg1 string) (mailgun.StoredMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoredMessageForURL", arg0, arg1)
	ret0, _ := ret[0].(mailgun.StoredMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoredMessageForURL indicates an expected call of GetStoredMessageForURL
func (mr *MockMailgunMockRecorder) GetStoredMessageForURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoredMessageForURL", reflect.TypeOf((*MockMailgun)(nil).GetStoredMessageForURL), arg0, arg1)
}

// GetStoredMessageRaw mocks base method
func (m *MockMailgun) GetStoredMessageRaw(arg0 context.Context, arg1 string) (mailgun.StoredMessageRaw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoredMessageRaw", arg0, arg1)
	ret0, _ := ret[0].(mailgun.StoredMessageRaw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoredMessageRaw indicates an expected call of GetStoredMessageRaw
func (mr *MockMailgunMockRecorder) GetStoredMessageRaw(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoredMessageRaw", reflect.TypeOf((*MockMailgun)(nil).GetStoredMessageRaw), arg0, arg1)
}

// GetStoredMessageRawForURL mocks base method
func (m *MockMailgun) GetStoredMessageRawForURL(arg0 context.Context, arg1 string) (mailgun.StoredMessageRaw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoredMessageRawForURL", arg0, arg1)
	ret0, _ := ret[0].(mailgun.StoredMessageRaw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoredMessageRawForURL indicates an expected call of GetStoredMessageRawForURL
func (mr *MockMailgunMockRecorder) GetStoredMessageRawForURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoredMessageRawForURL", reflect.TypeOf((*MockMailgun)(nil).GetStoredMessageRawForURL), arg0, arg1)
}

// GetTag mocks base method
func (m *MockMailgun) GetTag(arg0 context.Context, arg1 string) (mailgun.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", arg0, arg1)
	ret0, _ := ret[0].(mailgun.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag
func (mr *MockMailgunMockRecorder) GetTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockMailgun)(nil).GetTag), arg0, arg1)
}

// GetTagLimits mocks base method
func (m *MockMailgun) GetTagLimits(arg0 context.Context, arg1 string) (mailgun.TagLimits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagLimits", arg0, arg1)
	ret0, _ := ret[0].(mailgun.TagLimits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagLimits indicates an expected call of GetTagLimits
func (mr *MockMailgunMockRecorder) GetTagLimits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagLimits", reflect.TypeOf((*MockMailgun)(nil).GetTagLimits), arg0, arg1)
}

// GetTemplate mocks base method
func (m *MockMailgun) GetTemplate(arg0 context.Context, arg1 string) (mailgun.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", arg0, arg1)
	ret0, _ := ret[0].(mailgun.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate
func (mr *MockMailgunMockRecorder) GetTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockMailgun)(nil).GetTemplate), arg0, arg1)
}

// GetTemplateVersion mocks base method
func (m *MockMailgun) GetTemplateVersion(arg0 context.Context, arg1, arg2 string) (mailgun.TemplateVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(mailgun.TemplateVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateVersion indicates an expected call of GetTemplateVersion
func (mr *MockMailgunMockRecorder) GetTemplateVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateVersion", reflect.TypeOf((*MockMailgun)(nil).GetTemplateVersion), arg0, arg1, arg2)
}

// GetUnsubscribe mocks base method
func (m *MockMailgun) GetUnsubscribe(arg0 context.Context, arg1 string) (mailgun.Unsubscribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsubscribe", arg0, arg1)
	ret0, _ := ret[0].(mailgun.Unsubscribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnsubscribe indicates an expected call of GetUnsubscribe
func (mr *MockMailgunMockRecorder) GetUnsubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsubscribe", reflect.TypeOf((*MockMailgun)(nil).GetUnsubscribe), arg0, arg1)
}

// GetWebhook mocks base method
func (m *MockMailgun) GetWebhook(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhook", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhook indicates an expected call of GetWebhook
func (mr *MockMailgunMockRecorder) GetWebhook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhook", reflect.TypeOf((*MockMailgun)(nil).GetWebhook), arg0, arg1)
}

// ListBounces mocks base method
func (m *MockMailgun) ListBounces(arg0 *mailgun.ListOptions) *mailgun.BouncesIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBounces", arg0)
	ret0, _ := ret[0].(*mailgun.BouncesIterator)
	return ret0
}

// ListBounces indicates an expected call of ListBounces
func (mr *MockMailgunMockRecorder) ListBounces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBounces", reflect.TypeOf((*MockMailgun)(nil).ListBounces), arg0)
}

// ListComplaints mocks base method
func (m *MockMailgun) ListComplaints(arg0 *mailgun.ListOptions) *mailgun.ComplaintsIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplaints", arg0)
	ret0, _ := ret[0].(*mailgun.ComplaintsIterator)
	return ret0
}

// ListComplaints indicates an expected call of ListComplaints
func (mr *MockMailgunMockRecorder) ListComplaints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplaints", reflect.TypeOf((*MockMailgun)(nil).ListComplaints), arg0)
}

// ListCredentials mocks base method
func (m *MockMailgun) ListCredentials(arg0 *mailgun.ListOptions) *mailgun.CredentialsIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCredentials", arg0)
	ret0, _ := ret[0].(*mailgun.CredentialsIterator)
	return ret0
}

// ListCredentials indicates an expected call of ListCredentials
func (mr *MockMailgunMockRecorder) ListCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCredentials", reflect.TypeOf((*MockMailgun)(nil).ListCredentials), arg0)
}

// ListDomainIPS mocks base method
func (m *MockMailgun) ListDomainIPS(arg0 context.Context) ([]mailgun.IPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainIPS", arg0)
	ret0, _ := ret[0].([]mailgun.IPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainIPS indicates an expected call of ListDomainIPS
func (mr *MockMailgunMockRecorder) ListDomainIPS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainIPS", reflect.TypeOf((*MockMailgun)(nil).ListDomainIPS), arg0)
}

// ListDomains mocks base method
func (m *MockMailgun) ListDomains(arg0 *mailgun.ListOptions) *mailgun.DomainsIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomains", arg0)
	ret0, _ := ret[0].(*mailgun.DomainsIterator)
	return ret0
}

// ListDomains indicates an expected call of ListDomains
func (mr *MockMailgunMockRecorder) ListDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomains", reflect.TypeOf((*MockMailgun)(nil).ListDomains), arg0)
}

// ListEvents mocks base method
func (m *MockMailgun) ListEvents(arg0 *mailgun.ListEventOptions) *mailgun.EventIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", arg0)
	ret0, _ := ret[0].(*mailgun.EventIterator)
	return ret0
}

// ListEvents indicates an expected call of ListEvents
func (mr *MockMailgunMockRecorder) ListEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockMailgun)(nil).ListEvents), arg0)
}

// ListExports mocks base method
func (m *MockMailgun) ListExports(arg0 context.Context, arg1 string) ([]mailgun.Export, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExports", arg0, arg1)
	ret0, _ := ret[0].([]mailgun.Export)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExports indicates an expected call of ListExports
func (mr *MockMailgunMockRecorder) ListExports(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExports", reflect.TypeOf((*MockMailgun)(nil).ListExports), arg0, arg1)
}

// ListIPS mocks base method
func (m *MockMailgun) ListIPS(arg0 context.Context, arg1 bool) ([]mailgun.IPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIPS", arg0, arg1)
	ret0, _ := ret[0].([]mailgun.IPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPS indicates an expected call of ListIPS
func (mr *MockMailgunMockRecorder) ListIPS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPS", reflect.TypeOf((*MockMailgun)(nil).ListIPS), arg0, arg1)
}

// ListMailingLists mocks base method
func (m *MockMailgun) ListMailingLists(arg0 *mailgun.ListOptions) *mailgun.ListsIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMailingLists", arg0)
	ret0, _ := ret[0].(*mailgun.ListsIterator)
	return ret0
}

// ListMailingLists indicates an expected call of ListMailingLists
func (mr *MockMailgunMockRecorder) ListMailingLists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMailingLists", reflect.TypeOf((*MockMailgun)(nil).ListMailingLists), arg0)
}

// ListMembers mocks base method
func (m *MockMailgun) ListMembers(arg0 string, arg1 *mailgun.ListOptions) *mailgun.MemberListIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0, arg1)
	ret0, _ := ret[0].(*mailgun.MemberListIterator)
	return ret0
}

// ListMembers indicates an expected call of ListMembers
func (mr *MockMailgunMockRecorder) ListMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockMailgun)(nil).ListMembers), arg0, arg1)
}

// ListRoutes mocks base method
func (m *MockMailgun) ListRoutes(arg0 *mailgun.ListOptions) *mailgun.RoutesIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutes", arg0)
	ret0, _ := ret[0].(*mailgun.RoutesIterator)
	return ret0
}

// ListRoutes indicates an expected call of ListRoutes
func (mr *MockMailgunMockRecorder) ListRoutes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutes", reflect.TypeOf((*MockMailgun)(nil).ListRoutes), arg0)
}

// ListTags mocks base method
func (m *MockMailgun) ListTags(arg0 *mailgun.ListTagOptions) *mailgun.TagIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", arg0)
	ret0, _ := ret[0].(*mailgun.TagIterator)
	return ret0
}

// ListTags indicates an expected call of ListTags
func (mr *MockMailgunMockRecorder) ListTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockMailgun)(nil).ListTags), arg0)
}

// ListTemplateVersions mocks base method
func (m *MockMailgun) ListTemplateVersions(arg0 string, arg1 *mailgun.ListOptions) *mailgun.TemplateVersionsIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateVersions", arg0, arg1)
	ret0, _ := ret[0].(*mailgun.TemplateVersionsIterator)
	return ret0
}

// ListTemplateVersions indicates an expected call of ListTemplateVersions
func (mr *MockMailgunMockRecorder) ListTemplateVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateVersions", reflect.TypeOf((*MockMailgun)(nil).ListTemplateVersions), arg0, arg1)
}

// ListTemplates mocks base method
func (m *MockMailgun) ListTemplates(arg0 *mailgun.ListTemplateOptions) *mailgun.TemplatesIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplates", arg0)
	ret0, _ := ret[0].(*mailgun.TemplatesIterator)
	return ret0
}

// ListTemplates indicates an expected call of ListTemplates
func (mr *MockMailgunMockRecorder) ListTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplates", reflect.TypeOf((*MockMailgun)(nil).ListTemplates), arg0)
}

// ListUnsubscribes mocks base method
func (m *MockMailgun) ListUnsubscribes(arg0 *mailgun.ListOptions) *mailgun.UnsubscribesIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnsubscribes", arg0)
	ret0, _ := ret[0].(*mailgun.UnsubscribesIterator)
	return ret0
}

// ListUnsubscribes indicates an expected call of ListUnsubscribes
func (mr *MockMailgunMockRecorder) ListUnsubscribes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnsubscribes", reflect.TypeOf((*MockMailgun)(nil).ListUnsubscribes), arg0)
}

// ListWebhooks mocks base method
func (m *MockMailgun) ListWebhooks(arg0 context.Context) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebhooks", arg0)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebhooks indicates an expected call of ListWebhooks
func (mr *MockMailgunMockRecorder) ListWebhooks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhooks", reflect.TypeOf((*MockMailgun)(nil).ListWebhooks), arg0)
}

// NewMIMEMessage mocks base method
func (m *MockMailgun) NewMIMEMessage(arg0 io.ReadCloser, arg1 ...string) *mailgun.Message {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewMIMEMessage", varargs...)
	ret0, _ := ret[0].(*mailgun.Message)
	return ret0
}

// NewMIMEMessage indicates an expected call of NewMIMEMessage
func (mr *MockMailgunMockRecorder) NewMIMEMessage(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMIMEMessage", reflect.TypeOf((*MockMailgun)(nil).NewMIMEMessage), varargs...)
}

// NewMessage mocks base method
func (m *MockMailgun) NewMessage(arg0, arg1, arg2 string, arg3 ...string) *mailgun.Message {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewMessage", varargs...)
	ret0, _ := ret[0].(*mailgun.Message)
	return ret0
}

// NewMessage indicates an expected call of NewMessage
func (mr *MockMailgunMockRecorder) NewMessage(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessage", reflect.TypeOf((*MockMailgun)(nil).NewMessage), varargs...)
}

// PollEvents mocks base method
func (m *MockMailgun) PollEvents(arg0 *mailgun.ListEventOptions) *mailgun.EventPoller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollEvents", arg0)
	ret0, _ := ret[0].(*mailgun.EventPoller)
	return ret0
}

// PollEvents indicates an expected call of PollEvents
func (mr *MockMailgunMockRecorder) PollEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollEvents", reflect.TypeOf((*MockMailgun)(nil).PollEvents), arg0)
}

// ReSend mocks base method
func (m *MockMailgun) ReSend(arg0 context.Context, arg1 string, arg2 ...string) (string, string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReSend", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReSend indicates an expected call of ReSend
func (mr *MockMailgunMockRecorder) ReSend(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReSend", reflect.TypeOf((*MockMailgun)(nil).ReSend), varargs...)
}

// Send mocks base method
func (m *MockMailgun) Send(arg0 context.Context, arg1 *mailgun.Message) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Send indicates an expected call of Send
func (mr *MockMailgunMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMailgun)(nil).Send), arg0, arg1)
}

// SetAPIBase mocks base method
func (m *MockMailgun) SetAPIBase(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAPIBase", arg0)
}

// SetAPIBase indicates an expected call of SetAPIBase
func (mr *MockMailgunMockRecorder) SetAPIBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIBase", reflect.TypeOf((*MockMailgun)(nil).SetAPIBase), arg0)
}

// SetClient mocks base method
func (m *MockMailgun) SetClient(arg0 *http.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", arg0)
}

// SetClient indicates an expected call of SetClient
func (mr *MockMailgunMockRecorder) SetClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockMailgun)(nil).SetClient), arg0)
}

// UpdateClickTracking mocks base method
func (m *MockMailgun) UpdateClickTracking(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClickTracking", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClickTracking indicates an expected call of UpdateClickTracking
func (mr *MockMailgunMockRecorder) UpdateClickTracking(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClickTracking", reflect.TypeOf((*MockMailgun)(nil).UpdateClickTracking), arg0, arg1, arg2)
}

// UpdateDomainConnection mocks base method
func (m *MockMailgun) UpdateDomainConnection(arg0 context.Context, arg1 string, arg2 mailgun.DomainConnection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainConnection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDomainConnection indicates an expected call of UpdateDomainConnection
func (mr *MockMailgunMockRecorder) UpdateDomainConnection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainConnection", reflect.TypeOf((*MockMailgun)(nil).UpdateDomainConnection), arg0, arg1, arg2)
}

// UpdateMailingList mocks base method
func (m *MockMailgun) UpdateMailingList(arg0 context.Context, arg1 string, arg2 mailgun.MailingList) (mailgun.MailingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMailingList", arg0, arg1, arg2)
	ret0, _ := ret[0].(mailgun.MailingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMailingList indicates an expected call of UpdateMailingList
func (mr *MockMailgunMockRecorder) UpdateMailingList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMailingList", reflect.TypeOf((*MockMailgun)(nil).UpdateMailingList), arg0, arg1, arg2)
}

// UpdateMember mocks base method
func (m *MockMailgun) UpdateMember(arg0 context.Context, arg1, arg2 string, arg3 mailgun.Member) (mailgun.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMember", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(mailgun.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMember indicates an expected call of UpdateMember
func (mr *MockMailgunMockRecorder) UpdateMember(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockMailgun)(nil).UpdateMember), arg0, arg1, arg2, arg3)
}

// UpdateOpenTracking mocks base method
func (m *MockMailgun) UpdateOpenTracking(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOpenTracking", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOpenTracking indicates an expected call of UpdateOpenTracking
func (mr *MockMailgunMockRecorder) UpdateOpenTracking(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOpenTracking", reflect.TypeOf((*MockMailgun)(nil).UpdateOpenTracking), arg0, arg1, arg2)
}

// UpdateRoute mocks base method
func (m *MockMailgun) UpdateRoute(arg0 context.Context, arg1 string, arg2 mailgun.Route) (mailgun.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoute", arg0, arg1, arg2)
	ret0, _ := ret[0].(mailgun.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoute indicates an expected call of UpdateRoute
func (mr *MockMailgunMockRecorder) UpdateRoute(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoute", reflect.TypeOf((*MockMailgun)(nil).UpdateRoute), arg0, arg1, arg2)
}

// UpdateTemplate mocks base method
func (m *MockMailgun) UpdateTemplate(arg0 context.Context, arg1 *mailgun.Template) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTemplate indicates an expected call of UpdateTemplate
func (mr *MockMailgunMockRecorder) UpdateTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplate", reflect.TypeOf((*MockMailgun)(nil).UpdateTemplate), arg0, arg1)
}

// UpdateTemplateVersion mocks base method
func (m *MockMailgun) UpdateTemplateVersion(arg0 context.Context, arg1 string, arg2 *mailgun.TemplateVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplateVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTemplateVersion indicates an expected call of UpdateTemplateVersion
func (mr *MockMailgunMockRecorder) UpdateTemplateVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplateVersion", reflect.TypeOf((*MockMailgun)(nil).UpdateTemplateVersion), arg0, arg1, arg2)
}

// UpdateUnsubscribeTracking mocks base method
func (m *MockMailgun) UpdateUnsubscribeTracking(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnsubscribeTracking", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUnsubscribeTracking indicates an expected call of UpdateUnsubscribeTracking
func (mr *MockMailgunMockRecorder) UpdateUnsubscribeTracking(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnsubscribeTracking", reflect.TypeOf((*MockMailgun)(nil).UpdateUnsubscribeTracking), arg0, arg1, arg2, arg3, arg4)
}

// UpdateWebhook mocks base method
func (m *MockMailgun) UpdateWebhook(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebhook", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWebhook indicates an expected call of UpdateWebhook
func (mr *MockMailgunMockRecorder) UpdateWebhook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhook", reflect.TypeOf((*MockMailgun)(nil).UpdateWebhook), arg0, arg1, arg2)
}

// VerifyDomain mocks base method
func (m *MockMailgun) VerifyDomain(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyDomain", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyDomain indicates an expected call of VerifyDomain
func (mr *MockMailgunMockRecorder) VerifyDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDomain", reflect.TypeOf((*MockMailgun)(nil).VerifyDomain), arg0, arg1)
}

// VerifyWebhookRequest mocks base method
func (m *MockMailgun) VerifyWebhookRequest(arg0 *http.Request) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyWebhookRequest", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyWebhookRequest indicates an expected call of VerifyWebhookRequest
func (mr *MockMailgunMockRecorder) VerifyWebhookRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyWebhookRequest", reflect.TypeOf((*MockMailgun)(nil).VerifyWebhookRequest), arg0)
}

// VerifyWebhookSignature mocks base method
func (m *MockMailgun) VerifyWebhookSignature(arg0 mailgun.Signature) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyWebhookSignature", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyWebhookSignature indicates an expected call of VerifyWebhookSignature
func (mr *MockMailgunMockRecorder) VerifyWebhookSignature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyWebhookSignature", reflect.TypeOf((*MockMailgun)(nil).VerifyWebhookSignature), arg0)
}
