// Code generated by MockGen. DO NOT EDIT.
// Source: ../rpc/services.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	rpc "github.com/hiroaki-yamamoto/reusable-services/email/rpc"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockEmailClient is a mock of EmailClient interface
type MockEmailClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmailClientMockRecorder
}

// MockEmailClientMockRecorder is the mock recorder for MockEmailClient
type MockEmailClientMockRecorder struct {
	mock *MockEmailClient
}

// NewMockEmailClient creates a new mock instance
func NewMockEmailClient(ctrl *gomock.Controller) *MockEmailClient {
	mock := &MockEmailClient{ctrl: ctrl}
	mock.recorder = &MockEmailClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmailClient) EXPECT() *MockEmailClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockEmailClient) Send(ctx context.Context, in *rpc.SendRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockEmailClientMockRecorder) Send(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmailClient)(nil).Send), varargs...)
}

// MockEmailServer is a mock of EmailServer interface
type MockEmailServer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServerMockRecorder
}

// MockEmailServerMockRecorder is the mock recorder for MockEmailServer
type MockEmailServerMockRecorder struct {
	mock *MockEmailServer
}

// NewMockEmailServer creates a new mock instance
func NewMockEmailServer(ctrl *gomock.Controller) *MockEmailServer {
	mock := &MockEmailServer{ctrl: ctrl}
	mock.recorder = &MockEmailServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmailServer) EXPECT() *MockEmailServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockEmailServer) Send(arg0 context.Context, arg1 *rpc.SendRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockEmailServerMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmailServer)(nil).Send), arg0, arg1)
}
