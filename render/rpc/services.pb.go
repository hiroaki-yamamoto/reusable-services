// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("services.proto", fileDescriptor_8e16ccb8c5307b32) }

var fileDescriptor_8e16ccb8c5307b32 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0x4a, 0xcd, 0x4b,
	0x49, 0x2d, 0x92, 0xe2, 0xc9, 0xcd, 0x4f, 0x49, 0xcd, 0x81, 0x8a, 0x1a, 0x05, 0x70, 0xf1, 0x87,
	0xa4, 0xe6, 0x16, 0xe4, 0x24, 0x96, 0xa4, 0x06, 0x43, 0xd4, 0x0b, 0xd9, 0x72, 0x41, 0x95, 0x0a,
	0x49, 0xe8, 0x41, 0x18, 0x7a, 0x41, 0x60, 0x2a, 0x33, 0x2f, 0x3d, 0x28, 0xb5, 0xb0, 0x34, 0xb5,
	0xb8, 0x44, 0x4a, 0x12, 0x8b, 0x4c, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x93, 0x46, 0x94, 0x5a,
	0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x46, 0x66, 0x51, 0x7e, 0x62,
	0x76, 0xa6, 0x6e, 0x65, 0x62, 0x6e, 0x62, 0x6e, 0x7e, 0x49, 0xbe, 0x3e, 0x44, 0x9f, 0x7e, 0x51,
	0x41, 0x72, 0x12, 0x1b, 0xd8, 0x09, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05, 0x02, 0xa6,
	0xb3, 0xaa, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TemplateServiceClient is the client API for TemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TemplateServiceClient interface {
	Render(ctx context.Context, in *RenderingRequest, opts ...grpc.CallOption) (*RenderingResponse, error)
}

type templateServiceClient struct {
	cc *grpc.ClientConn
}

func NewTemplateServiceClient(cc *grpc.ClientConn) TemplateServiceClient {
	return &templateServiceClient{cc}
}

func (c *templateServiceClient) Render(ctx context.Context, in *RenderingRequest, opts ...grpc.CallOption) (*RenderingResponse, error) {
	out := new(RenderingResponse)
	err := c.cc.Invoke(ctx, "/render.TemplateService/render", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateServiceServer is the server API for TemplateService service.
type TemplateServiceServer interface {
	Render(context.Context, *RenderingRequest) (*RenderingResponse, error)
}

// UnimplementedTemplateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTemplateServiceServer struct {
}

func (*UnimplementedTemplateServiceServer) Render(ctx context.Context, req *RenderingRequest) (*RenderingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Render not implemented")
}

func RegisterTemplateServiceServer(s *grpc.Server, srv TemplateServiceServer) {
	s.RegisterService(&_TemplateService_serviceDesc, srv)
}

func _TemplateService_Render_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).Render(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/render.TemplateService/Render",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).Render(ctx, req.(*RenderingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TemplateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "render.TemplateService",
	HandlerType: (*TemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "render",
			Handler:    _TemplateService_Render_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
